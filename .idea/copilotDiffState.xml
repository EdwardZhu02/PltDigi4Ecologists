<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Mainapp/templates/interactive_barplot.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Mainapp/templates/interactive_barplot.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;{% extends 'master.html' %}&#10;&#10;{% block content %}&#10;&lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;div class=&quot;col-md-3&quot;&gt;&#10;            &lt;h4&gt;Controls&lt;/h4&gt;&#10;            &lt;div class=&quot;btn-group-vertical w-100 mb-3&quot;&gt;&#10;                &lt;button onclick=&quot;resetCalibration()&quot; class=&quot;btn btn-warning&quot;&gt;Reset Calibration&lt;/button&gt;&#10;                &lt;button onclick=&quot;clearDataPoints()&quot; class=&quot;btn btn-warning&quot;&gt;Clear Points&lt;/button&gt;&#10;                &lt;button onclick=&quot;saveResults()&quot; class=&quot;btn btn-success&quot;&gt;Save Results&lt;/button&gt;&#10;                &lt;button onclick=&quot;exportToCSV()&quot; class=&quot;btn btn-primary&quot;&gt;Export to CSV&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card&quot;&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;h5 class=&quot;card-title&quot;&gt;Zoom &amp; Pan&lt;/h5&gt;&#10;                    &lt;div class=&quot;btn-group mb-2&quot;&gt;&#10;                        &lt;button onclick=&quot;zoomIn()&quot; class=&quot;btn btn-secondary&quot;&gt;Zoom In&lt;/button&gt;&#10;                        &lt;button onclick=&quot;zoomOut()&quot; class=&quot;btn btn-secondary&quot;&gt;Zoom Out&lt;/button&gt;&#10;                        &lt;button onclick=&quot;resetZoom()&quot; class=&quot;btn btn-secondary&quot;&gt;Reset View&lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;p&gt;Zoom: &lt;span id=&quot;zoom-display&quot;&gt;100%&lt;/span&gt;&lt;/p&gt;&#10;                    &lt;br&gt;&#10;                    &lt;div class=&quot;instructions&quot;&gt;&#10;                        &lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;/p&gt;&#10;                        &lt;ul&gt;&#10;                            &lt;li&gt;Click on the image to calibrate axes (2 points for Y).&lt;/li&gt;&#10;                            &lt;li&gt;After calibration, click on data points to extract their values.&lt;/li&gt;&#10;                            &lt;li&gt;Use Ctrl + Left Click to pan the image.&lt;/li&gt;&#10;                            &lt;li&gt;Use mouse wheel while holding Ctrl to zoom in/out.&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;col-md-9&quot;&gt;&#10;            &lt;h4&gt;Barplot Interactive View&lt;/h4&gt;&#10;            &lt;div id=&quot;image-container&quot; class=&quot;border rounded overflow-auto&quot; style=&quot;height: 70vh;&quot;&gt;&#10;                &lt;div id=&quot;zoom-scene&quot;&gt;&#10;                    &lt;img id=&quot;plot-image&quot; src=&quot;/uploaded_images/{{ uploaded_image.image }}&quot; alt=&quot;Uploaded Image&quot; onclick=&quot;handleImageClick(event)&quot; class=&quot;img-fluid&quot;&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;row mt-4&quot;&gt;&#10;        &lt;div class=&quot;col-12&quot;&gt;&#10;            &lt;h4&gt;Extracted Data&lt;/h4&gt;&#10;            &lt;table class=&quot;table table-striped&quot;&gt;&#10;                &lt;thead&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th&gt;#&lt;/th&gt;&#10;                        &lt;th&gt;Y Value&lt;/th&gt;&#10;                        &lt;th&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody id=&quot;data-table-body&quot;&gt;&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;    const existingAnalysis = {{ existing_analysis|default:'{}'|safe }};&#10;    let calibration = { y: [] };&#10;    let calibratedValue = null;&#10;    let isCalibrating = true;&#10;    let extractedData = [];&#10;    // Zoom &amp; pan variables&#10;    let zoomLevel = 1;&#10;    let panX = 0;&#10;    let panY = 0;&#10;    let isDragging = false;&#10;    let lastMouseX = 0;&#10;    let lastMouseY = 0;&#10;    function handleImageClick(event) {&#10;        if (isDragging) return;&#10;        const imageElement = document.querySelector(&quot;#plot-image&quot;);&#10;        const imageRect = imageElement.getBoundingClientRect();&#10;        // Calculate relative and original positions for X and Y&#10;        const relativeX = (event.clientX - imageRect.left) / imageRect.width;&#10;        const relativeY = (event.clientY - imageRect.top) / imageRect.height;&#10;        const originalX = relativeX * imageElement.naturalWidth;&#10;        const originalY = relativeY * imageElement.naturalHeight;&#10;        if (isCalibrating) {&#10;            if (calibration.y.length &lt; 2) {&#10;                calibration.y.push({ x: originalX, y: originalY, relativeX, relativeY });&#10;                renderGreenDot(relativeX, relativeY);&#10;                alert(`Y-axis calibration point ${calibration.y.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this Y-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.y[calibration.y.length - 1].value = parseFloat(value);&#10;                }&#10;            }&#10;            if (calibration.y.length === 2) {&#10;                isCalibrating = false;&#10;                alert(&quot;Calibration complete! You can now click on top of the bars to extract data points.&quot;);&#10;                calculateCalibration();&#10;                sendCalibrationData();&#10;            }&#10;        } else {&#10;            const realY = calculateRealY(originalY);&#10;            const dotElement = renderRedDot(relativeX, relativeY);&#10;            const dataPoint = { y: realY, originalX, originalY, relativeX, relativeY, dotElement };&#10;            extractedData.push(dataPoint);&#10;            updateDataTable();&#10;            sendExtractedData({ y: realY });&#10;        }&#10;    }&#10;    function calculateCalibration() {&#10;        calibratedValue = (calibration.y[1].value - calibration.y[0].value) / (calibration.y[1].y - calibration.y[0].y);&#10;    }&#10;    function calculateRealY(y) {&#10;        return calibration.y[0].value + (y - calibration.y[0].y) * calibratedValue;&#10;    }&#10;    function renderRedDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot red-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;        return dot;&#10;    }&#10;    function renderGreenDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot green-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;    }&#10;    function exportToCSV() {&#10;        const csvContent = [&quot;Index,Y Value&quot;];&#10;        extractedData.forEach((data, index) =&gt; {&#10;            csvContent.push(`${index + 1},${data.y.toFixed(2)}`);&#10;        });&#10;        const blob = new Blob([csvContent.join(&quot;\n&quot;)], { type: &quot;text/csv&quot; });&#10;        const url = URL.createObjectURL(blob);&#10;        const a = document.createElement(&quot;a&quot;);&#10;        a.href = url;&#10;        a.download = &quot;barplot_data.csv&quot;;&#10;        a.click();&#10;        URL.revokeObjectURL(url);&#10;    }&#10;    function deleteDataPoint(index) {&#10;        if (extractedData[index].dotElement) {&#10;            extractedData[index].dotElement.remove();&#10;        }&#10;        extractedData.splice(index, 1);&#10;        updateDataTable();&#10;    }&#10;    function highlightPoint(index) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const highlight = document.createElement(&quot;div&quot;);&#10;        const dataPoint = extractedData[index];&#10;        highlight.className = &quot;data-dot highlight-dot&quot;;&#10;        highlight.style.left = `${dataPoint.relativeX * 100}%`;&#10;        highlight.style.top = `${dataPoint.relativeY * 100}%`;&#10;        container.appendChild(highlight);&#10;        setTimeout(() =&gt; highlight.remove(), 1000);&#10;    }&#10;    function updateDataTable() {&#10;        const tableBody = document.getElementById(&quot;data-table-body&quot;);&#10;        tableBody.innerHTML = &quot;&quot;;&#10;        extractedData.forEach((data, index) =&gt; {&#10;            const row = document.createElement(&quot;tr&quot;);&#10;            row.innerHTML = `&lt;td&gt;${index + 1}&lt;/td&gt;&lt;td&gt;${data.y.toFixed(2)}&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#&quot; onclick=&quot;deleteDataPoint(${index})&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;`;&#10;            row.addEventListener(&quot;click&quot;, () =&gt; highlightPoint(index));&#10;            tableBody.appendChild(row);&#10;        });&#10;    }&#10;    // Zoom &amp; pan functions&#10;    function zoomIn() {&#10;        zoomLevel = Math.min(zoomLevel * 1.5, 5);&#10;        updateImageTransform();&#10;    }&#10;    function zoomOut() {&#10;        zoomLevel = Math.max(zoomLevel / 1.5, 0.5);&#10;        updateImageTransform();&#10;    }&#10;    function resetZoom() {&#10;        zoomLevel = 1;&#10;        panX = 0;&#10;        panY = 0;&#10;        updateImageTransform();&#10;    }&#10;    function updateImageTransform() {&#10;        const scene = document.querySelector(&quot;#zoom-scene&quot;);&#10;        scene.style.transform = `scale(${zoomLevel}) translate(${panX}px, ${panY}px)`;&#10;        document.getElementById('zoom-display').textContent = Math.round(zoomLevel * 100) + '%';&#10;    }&#10;    function handleMouseDown(event) {&#10;        if (event.button === 0 &amp;&amp; event.ctrlKey) {&#10;            isDragging = true;&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;            event.preventDefault();&#10;        }&#10;    }&#10;    function handleMouseMove(event) {&#10;        if (isDragging) {&#10;            const deltaX = event.clientX - lastMouseX;&#10;            const deltaY = event.clientY - lastMouseY;&#10;            panX += deltaX / zoomLevel;&#10;            panY += deltaY / zoomLevel;&#10;            updateImageTransform();&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;        }&#10;    }&#10;    function handleMouseUp(event) {&#10;        isDragging = false;&#10;    }&#10;    function handleWheel(event) {&#10;        if (event.ctrlKey) {&#10;            event.preventDefault();&#10;            if (event.deltaY &lt; 0) {&#10;                zoomIn();&#10;            } else {&#10;                zoomOut();&#10;            }&#10;        }&#10;    }&#10;    document.addEventListener('DOMContentLoaded', function() {&#10;        const imageContainer = document.querySelector(&quot;#image-container&quot;);&#10;        imageContainer.addEventListener('mousedown', handleMouseDown);&#10;        document.addEventListener('mousemove', handleMouseMove);&#10;        document.addEventListener('mouseup', handleMouseUp);&#10;        imageContainer.addEventListener('wheel', handleWheel);&#10;        if (existingAnalysis.calibration) {&#10;            existingAnalysis.calibration.y.forEach(pt =&gt; {&#10;                calibration.y.push(pt);&#10;                renderGreenDot(pt.relativeX, pt.relativeY);&#10;            });&#10;            if (calibration.y.length === 2) {&#10;                calculateCalibration(); isCalibrating = false;&#10;            }&#10;        }&#10;        if (existingAnalysis.extractedData) {&#10;            existingAnalysis.extractedData.forEach(pt =&gt; {&#10;                const dot = renderRedDot(pt.relativeX, pt.relativeY);&#10;                const dataPoint = { ...pt, dotElement: dot };&#10;                extractedData.push(dataPoint);&#10;            });&#10;            updateDataTable();&#10;        }&#10;    });&#10;    function sendCalibrationData() {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ calibration })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Calibration data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending calibration data:&quot;, error));&#10;    }&#10;    function sendExtractedData(data) {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ extractedData: data })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Extracted data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending extracted data:&quot;, error));&#10;    }&#10;    function resetCalibration() {&#10;        calibration = { y: [] };&#10;        calibratedValue = null;&#10;        isCalibrating = true;&#10;        document.querySelectorAll('.green-dot').forEach(dot =&gt; dot.remove());&#10;        alert('Calibration has been reset. Please re-calibrate Y axis.');&#10;    }&#10;    function clearDataPoints() {&#10;        extractedData.forEach(dp =&gt; { if (dp.dotElement) dp.dotElement.remove(); });&#10;        extractedData = [];&#10;        updateDataTable();&#10;    }&#10;    function saveResults() {&#10;        fetch('', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token }}' },&#10;            body: JSON.stringify({ saveResults: true, calibration, extractedData })&#10;        })&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; alert(data.message || 'Results saved'));&#10;    }&#10;&lt;/script&gt;&#10;&lt;style&gt;&#10;    #image-container { position: relative; display: inline-block; overflow: auto; border: 2px solid #ddd; max-width: 100%; max-height: 70vh; cursor: crosshair; }&#10;    #zoom-scene { position: relative; transform-origin: top left; transition: transform 0.1s ease-out; width: fit-content; height: fit-content; }&#10;    #plot-image { display: block; max-width: none; max-height: none; transform-origin: top left; transition: transform 0.1s ease-out; }&#10;    .data-dot { position: absolute; border-radius: 50%; pointer-events: none; transform: translate(-50%, -50%); z-index: 10; }&#10;    .red-dot { width: 8px; height: 8px; background-color: #B02226; border: 1px solid whitesmoke; }&#10;    .green-dot { width: 10px; height: 10px; background-color: #38C1F3; border: 1px solid whitesmoke; }&#10;    .highlight-dot { width: 15px; height: 15px; background-color: #F0A12C; border: 2px solid whitesmoke; animation: pulse 0.5s ease-in-out; }&#10;    @keyframes pulse { 0% { transform: translate(-50%, -50%) scale(1); } 50% { transform: translate(-50%, -50%) scale(1.5); } 100% { transform: translate(-50%, -50%) scale(1); } }&#10;    .zoom-controls { margin: 10px 0; }&#10;    .zoom-controls button { margin-right: 10px; }&#10;    .instructions { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; }&#10;&lt;/style&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;{% extends 'master.html' %}&#10;&#10;{% block content %}&#10;&lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;!-- Top Row: Controls --&gt;&#10;        &lt;div class=&quot;col-12 mb-3&quot;&gt;&#10;            &lt;div class=&quot;btn-group&quot;&gt;&#10;                &lt;button onclick=&quot;resetCalibration()&quot; class=&quot;btn btn-warning&quot;&gt;Reset Calibration&lt;/button&gt;&#10;                &lt;button onclick=&quot;clearDataPoints()&quot; class=&quot;btn btn-warning&quot;&gt;Clear Points&lt;/button&gt;&#10;                &lt;button onclick=&quot;saveResults()&quot; class=&quot;btn btn-success&quot;&gt;Save Results&lt;/button&gt;&#10;                &lt;button onclick=&quot;exportToCSV()&quot; class=&quot;btn btn-primary&quot;&gt;Export to CSV&lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;!-- Left Column: Image --&gt;&#10;        &lt;div class=&quot;col-md-8&quot;&gt;&#10;            &lt;h4&gt;Barplot Interactive View&lt;/h4&gt;&#10;            &lt;div id=&quot;image-container&quot; class=&quot;border rounded overflow-auto&quot; style=&quot;height: 70vh;&quot;&gt;&#10;                &lt;div id=&quot;zoom-scene&quot;&gt;&#10;                    &lt;img id=&quot;plot-image&quot; src=&quot;/uploaded_images/{{ uploaded_image.image }}&quot; alt=&quot;Uploaded Image&quot; onclick=&quot;handleImageClick(event)&quot; class=&quot;img-fluid&quot;&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Right Column: Extracted Data --&gt;&#10;        &lt;div class=&quot;col-md-4&quot;&gt;&#10;            &lt;h4&gt;Extracted Data&lt;/h4&gt;&#10;            &lt;table class=&quot;table table-striped table-bordered table-hover&quot;&gt;&#10;                &lt;thead&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th&gt;#&lt;/th&gt;&#10;                        &lt;th&gt;Y Value&lt;/th&gt;&#10;                        &lt;th&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody id=&quot;data-table-body&quot;&gt;&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;row mt-4&quot;&gt;&#10;        &lt;!-- Bottom Row: Instructions --&gt;&#10;        &lt;div class=&quot;col-12&quot;&gt;&#10;            &lt;div class=&quot;instructions&quot;&gt;&#10;                &lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;/p&gt;&#10;                &lt;ul&gt;&#10;                    &lt;li&gt;Click on the image to calibrate axes (2 points for Y).&lt;/li&gt;&#10;                    &lt;li&gt;After calibration, click on data points to extract their values.&lt;/li&gt;&#10;                    &lt;li&gt;Use Ctrl + Left Click to pan the image.&lt;/li&gt;&#10;                    &lt;li&gt;Use mouse wheel while holding Ctrl to zoom in/out.&lt;/li&gt;&#10;                &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;script&gt;&#10;    const existingAnalysis = {{ existing_analysis|default:'{}'|safe }};&#10;    let calibration = { y: [] };&#10;    let calibratedValue = null;&#10;    let isCalibrating = true;&#10;    let extractedData = [];&#10;    // Zoom &amp; pan variables&#10;    let zoomLevel = 1;&#10;    let panX = 0;&#10;    let panY = 0;&#10;    let isDragging = false;&#10;    let lastMouseX = 0;&#10;    let lastMouseY = 0;&#10;    function handleImageClick(event) {&#10;        if (isDragging) return;&#10;        const imageElement = document.querySelector(&quot;#plot-image&quot;);&#10;        const imageRect = imageElement.getBoundingClientRect();&#10;        // Calculate relative and original positions for X and Y&#10;        const relativeX = (event.clientX - imageRect.left) / imageRect.width;&#10;        const relativeY = (event.clientY - imageRect.top) / imageRect.height;&#10;        const originalX = relativeX * imageElement.naturalWidth;&#10;        const originalY = relativeY * imageElement.naturalHeight;&#10;        if (isCalibrating) {&#10;            if (calibration.y.length &lt; 2) {&#10;                calibration.y.push({ x: originalX, y: originalY, relativeX, relativeY });&#10;                renderGreenDot(relativeX, relativeY);&#10;                alert(`Y-axis calibration point ${calibration.y.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this Y-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.y[calibration.y.length - 1].value = parseFloat(value);&#10;                }&#10;            }&#10;            if (calibration.y.length === 2) {&#10;                isCalibrating = false;&#10;                alert(&quot;Calibration complete! You can now click on top of the bars to extract data points.&quot;);&#10;                calculateCalibration();&#10;                sendCalibrationData();&#10;            }&#10;        } else {&#10;            const realY = calculateRealY(originalY);&#10;            const dotElement = renderRedDot(relativeX, relativeY);&#10;            const dataPoint = { y: realY, originalX, originalY, relativeX, relativeY, dotElement };&#10;            extractedData.push(dataPoint);&#10;            updateDataTable();&#10;            sendExtractedData({ y: realY });&#10;        }&#10;    }&#10;    function calculateCalibration() {&#10;        calibratedValue = (calibration.y[1].value - calibration.y[0].value) / (calibration.y[1].y - calibration.y[0].y);&#10;    }&#10;    function calculateRealY(y) {&#10;        return calibration.y[0].value + (y - calibration.y[0].y) * calibratedValue;&#10;    }&#10;    function renderRedDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot red-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;        return dot;&#10;    }&#10;    function renderGreenDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot green-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;    }&#10;    function exportToCSV() {&#10;        const csvContent = [&quot;Index,Y Value&quot;];&#10;        extractedData.forEach((data, index) =&gt; {&#10;            csvContent.push(`${index + 1},${data.y.toFixed(2)}`);&#10;        });&#10;        const blob = new Blob([csvContent.join(&quot;\n&quot;)], { type: &quot;text/csv&quot; });&#10;        const url = URL.createObjectURL(blob);&#10;        const a = document.createElement(&quot;a&quot;);&#10;        a.href = url;&#10;        a.download = &quot;barplot_data.csv&quot;;&#10;        a.click();&#10;        URL.revokeObjectURL(url);&#10;    }&#10;    function deleteDataPoint(index) {&#10;        if (extractedData[index].dotElement) {&#10;            extractedData[index].dotElement.remove();&#10;        }&#10;        extractedData.splice(index, 1);&#10;        updateDataTable();&#10;    }&#10;    function highlightPoint(index) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const highlight = document.createElement(&quot;div&quot;);&#10;        const dataPoint = extractedData[index];&#10;        highlight.className = &quot;data-dot highlight-dot&quot;;&#10;        highlight.style.left = `${dataPoint.relativeX * 100}%`;&#10;        highlight.style.top = `${dataPoint.relativeY * 100}%`;&#10;        container.appendChild(highlight);&#10;        setTimeout(() =&gt; highlight.remove(), 1000);&#10;    }&#10;    function updateDataTable() {&#10;        const tableBody = document.getElementById(&quot;data-table-body&quot;);&#10;        tableBody.innerHTML = &quot;&quot;;&#10;        extractedData.forEach((data, index) =&gt; {&#10;            const row = document.createElement(&quot;tr&quot;);&#10;            row.innerHTML = `&lt;td&gt;${index + 1}&lt;/td&gt;&lt;td&gt;${data.y.toFixed(2)}&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#&quot; onclick=&quot;deleteDataPoint(${index})&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;`;&#10;            row.addEventListener(&quot;click&quot;, () =&gt; highlightPoint(index));&#10;            tableBody.appendChild(row);&#10;        });&#10;    }&#10;    // Zoom &amp; pan functions&#10;    function zoomIn() {&#10;        zoomLevel = Math.min(zoomLevel * 1.5, 5);&#10;        updateImageTransform();&#10;    }&#10;    function zoomOut() {&#10;        zoomLevel = Math.max(zoomLevel / 1.5, 0.5);&#10;        updateImageTransform();&#10;    }&#10;    function resetZoom() {&#10;        zoomLevel = 1;&#10;        panX = 0;&#10;        panY = 0;&#10;        updateImageTransform();&#10;    }&#10;    function updateImageTransform() {&#10;        const scene = document.querySelector(&quot;#zoom-scene&quot;);&#10;        scene.style.transform = `scale(${zoomLevel}) translate(${panX}px, ${panY}px)`;&#10;        document.getElementById('zoom-display').textContent = Math.round(zoomLevel * 100) + '%';&#10;    }&#10;    function handleMouseDown(event) {&#10;        if (event.button === 0 &amp;&amp; event.ctrlKey) {&#10;            isDragging = true;&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;            event.preventDefault();&#10;        }&#10;    }&#10;    function handleMouseMove(event) {&#10;        if (isDragging) {&#10;            const deltaX = event.clientX - lastMouseX;&#10;            const deltaY = event.clientY - lastMouseY;&#10;            panX += deltaX / zoomLevel;&#10;            panY += deltaY / zoomLevel;&#10;            updateImageTransform();&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;        }&#10;    }&#10;    function handleMouseUp(event) {&#10;        isDragging = false;&#10;    }&#10;    function handleWheel(event) {&#10;        if (event.ctrlKey) {&#10;            event.preventDefault();&#10;            if (event.deltaY &lt; 0) {&#10;                zoomIn();&#10;            } else {&#10;                zoomOut();&#10;            }&#10;        }&#10;    }&#10;    document.addEventListener('DOMContentLoaded', function() {&#10;        const imageContainer = document.querySelector(&quot;#image-container&quot;);&#10;        imageContainer.addEventListener('mousedown', handleMouseDown);&#10;        document.addEventListener('mousemove', handleMouseMove);&#10;        document.addEventListener('mouseup', handleMouseUp);&#10;        imageContainer.addEventListener('wheel', handleWheel);&#10;        if (existingAnalysis.calibration) {&#10;            existingAnalysis.calibration.y.forEach(pt =&gt; {&#10;                calibration.y.push(pt);&#10;                renderGreenDot(pt.relativeX, pt.relativeY);&#10;            });&#10;            if (calibration.y.length === 2) {&#10;                calculateCalibration(); isCalibrating = false;&#10;            }&#10;        }&#10;        if (existingAnalysis.extractedData) {&#10;            existingAnalysis.extractedData.forEach(pt =&gt; {&#10;                const dot = renderRedDot(pt.relativeX, pt.relativeY);&#10;                const dataPoint = { ...pt, dotElement: dot };&#10;                extractedData.push(dataPoint);&#10;            });&#10;            updateDataTable();&#10;        }&#10;    });&#10;    function sendCalibrationData() {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ calibration })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Calibration data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending calibration data:&quot;, error));&#10;    }&#10;    function sendExtractedData(data) {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ extractedData: data })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Extracted data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending extracted data:&quot;, error));&#10;    }&#10;    function resetCalibration() {&#10;        calibration = { y: [] };&#10;        calibratedValue = null;&#10;        isCalibrating = true;&#10;        document.querySelectorAll('.green-dot').forEach(dot =&gt; dot.remove());&#10;        alert('Calibration has been reset. Please re-calibrate Y axis.');&#10;    }&#10;    function clearDataPoints() {&#10;        extractedData.forEach(dp =&gt; { if (dp.dotElement) dp.dotElement.remove(); });&#10;        extractedData = [];&#10;        updateDataTable();&#10;    }&#10;    function saveResults() {&#10;        fetch('', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token }}' },&#10;            body: JSON.stringify({ saveResults: true, calibration, extractedData })&#10;        })&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; alert(data.message || 'Results saved'));&#10;    }&#10;&lt;/script&gt;&#10;&lt;style&gt;&#10;    #image-container { position: relative; display: inline-block; overflow: auto; border: 2px solid #ddd; max-width: 100%; max-height: 70vh; cursor: crosshair; }&#10;    #zoom-scene { position: relative; transform-origin: top left; transition: transform 0.1s ease-out; width: fit-content; height: fit-content; }&#10;    #plot-image { display: block; max-width: none; max-height: none; transform-origin: top left; transition: transform 0.1s ease-out; }&#10;    .data-dot { position: absolute; border-radius: 50%; pointer-events: none; transform: translate(-50%, -50%); z-index: 10; }&#10;    .red-dot { width: 8px; height: 8px; background-color: #B02226; border: 1px solid whitesmoke; }&#10;    .green-dot { width: 10px; height: 10px; background-color: #38C1F3; border: 1px solid whitesmoke; }&#10;    .highlight-dot { width: 15px; height: 15px; background-color: #F0A12C; border: 2px solid whitesmoke; animation: pulse 0.5s ease-in-out; }&#10;    @keyframes pulse { 0% { transform: translate(-50%, -50%) scale(1); } 50% { transform: translate(-50%, -50%) scale(1.5); } 100% { transform: translate(-50%, -50%) scale(1); } }&#10;    .zoom-controls { margin: 10px 0; }&#10;    .zoom-controls button { margin-right: 10px; }&#10;    .instructions { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 20px; }&#10;    .table {&#10;        display: block;&#10;        max-height: 60vh;&#10;        overflow-y: auto;&#10;    }&#10;&lt;/style&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Mainapp/templates/interactive_scatter.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Mainapp/templates/interactive_scatter.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;{% extends 'master.html' %}&#10;&#10;{% block content %}&#10;&lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;!-- Left Column: Controls --&gt;&#10;        &lt;div class=&quot;col-md-3&quot;&gt;&#10;            &lt;h4&gt;Controls&lt;/h4&gt;&#10;            &lt;div class=&quot;btn-group-vertical w-100 mb-3&quot;&gt;&#10;                &lt;button onclick=&quot;resetCalibration()&quot; class=&quot;btn btn-warning&quot;&gt;Reset Calibration&lt;/button&gt;&#10;                &lt;button onclick=&quot;clearDataPoints()&quot; class=&quot;btn btn-warning&quot;&gt;Clear Points&lt;/button&gt;&#10;                &lt;button onclick=&quot;saveResults()&quot; class=&quot;btn btn-success&quot;&gt;Save Results&lt;/button&gt;&#10;                &lt;button onclick=&quot;exportToCSV()&quot; class=&quot;btn btn-primary&quot;&gt;Export to CSV&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card&quot;&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;h5 class=&quot;card-title&quot;&gt;Zoom &amp; Pan&lt;/h5&gt;&#10;                    &lt;div class=&quot;btn-group mb-2&quot;&gt;&#10;                        &lt;button onclick=&quot;zoomIn()&quot; class=&quot;btn btn-secondary&quot;&gt;Zoom In&lt;/button&gt;&#10;                        &lt;button onclick=&quot;zoomOut()&quot; class=&quot;btn btn-secondary&quot;&gt;Zoom Out&lt;/button&gt;&#10;                        &lt;button onclick=&quot;resetZoom()&quot; class=&quot;btn btn-secondary&quot;&gt;Reset View&lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;p&gt;Zoom: &lt;span id=&quot;zoom-display&quot;&gt;100%&lt;/span&gt;&lt;/p&gt;&#10;                    &lt;br&gt;&#10;                    &lt;div class=&quot;instructions&quot;&gt;&#10;                        &lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;/p&gt;&#10;                        &lt;ul&gt;&#10;                            &lt;li&gt;Click on the image to calibrate axes (2 points for X, 2 points for Y).&lt;/li&gt;&#10;                            &lt;li&gt;After calibration, click on data points to extract their values.&lt;/li&gt;&#10;                            &lt;li&gt;Use Ctrl + Left Click to pan the image.&lt;/li&gt;&#10;                            &lt;li&gt;Use mouse wheel while holding Ctrl to zoom in/out.&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Center Column: Image --&gt;&#10;        &lt;div class=&quot;col-md-9&quot;&gt;&#10;            &lt;h4&gt;Interactive View&lt;/h4&gt;&#10;            &lt;div id=&quot;image-container&quot; class=&quot;border rounded overflow-auto&quot; style=&quot;height: 70vh;&quot;&gt;&#10;                &lt;div id=&quot;zoom-scene&quot;&gt;&#10;                    &lt;img id=&quot;plot-image&quot; src=&quot;/uploaded_images/{{ uploaded_image.image }}&quot; alt=&quot;Uploaded Image&quot; onclick=&quot;handleImageClick(event)&quot; class=&quot;img-fluid&quot;&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Bottom Row: Extracted Data --&gt;&#10;    &lt;div class=&quot;row mt-4&quot;&gt;&#10;        &lt;div class=&quot;col-12&quot;&gt;&#10;            &lt;h4&gt;Extracted Data&lt;/h4&gt;&#10;            &lt;table class=&quot;table table-striped&quot;&gt;&#10;                &lt;thead&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th&gt;#&lt;/th&gt;&#10;                        &lt;th&gt;X Value&lt;/th&gt;&#10;                        &lt;th&gt;Y Value&lt;/th&gt;&#10;                        &lt;th&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody id=&quot;data-table-body&quot;&gt;&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;script&gt;&#10;    const existingAnalysis = {{ existing_analysis|default:'{}'|safe }};&#10;    let calibration = {&#10;        x: [],&#10;        y: []&#10;    };&#10;    let calibratedValues = {&#10;        x: null,&#10;        y: null&#10;    };&#10;    let isCalibrating = true;&#10;    let extractedData = [];&#10;&#10;    // Zoom and pan variables&#10;    let zoomLevel = 1;&#10;    let panX = 0;&#10;    let panY = 0;&#10;    let isDragging = false;&#10;    let lastMouseX = 0;&#10;    let lastMouseY = 0;&#10;&#10;    function handleImageClick(event) {&#10;        if (isDragging) return; // Don't process clicks during drag&#10;&#10;        const rect = event.target.getBoundingClientRect();&#10;        const imageElement = document.querySelector(&quot;#plot-image&quot;);&#10;        const imageRect = imageElement.getBoundingClientRect();&#10;&#10;        // Calculate relative position within the image (0 to 1)&#10;        const relativeX = (event.clientX - imageRect.left) / imageRect.width;&#10;        const relativeY = (event.clientY - imageRect.top) / imageRect.height;&#10;&#10;        // Convert to original image coordinates&#10;        const originalX = relativeX * imageElement.naturalWidth;&#10;        const originalY = relativeY * imageElement.naturalHeight;&#10;&#10;        if (isCalibrating) {&#10;            if (calibration.x.length &lt; 2) {&#10;                calibration.x.push({ x: originalX, y: originalY, relativeX, relativeY });&#10;                renderGreenDot(relativeX, relativeY);&#10;                alert(`X-axis calibration point ${calibration.x.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this X-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.x[calibration.x.length - 1].value = parseFloat(value);&#10;                }&#10;            } else if (calibration.y.length &lt; 2) {&#10;                calibration.y.push({ x: originalX, y: originalY, relativeX, relativeY });&#10;                renderGreenDot(relativeX, relativeY);&#10;                alert(`Y-axis calibration point ${calibration.y.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this Y-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.y[calibration.y.length - 1].value = parseFloat(value);&#10;                }&#10;            }&#10;&#10;            if (calibration.x.length === 2 &amp;&amp; calibration.y.length === 2) {&#10;                isCalibrating = false;&#10;                alert(&quot;Calibration complete! You can now click on data points.&quot;);&#10;                calculateCalibration();&#10;                sendCalibrationData();&#10;            }&#10;        } else {&#10;            const realValues = calculateRealValues(originalX, originalY);&#10;            const dotElement = renderRedDot(relativeX, relativeY);&#10;            const dataPoint = {&#10;                ...realValues,&#10;                originalX,&#10;                originalY,&#10;                relativeX,&#10;                relativeY,&#10;                dotElement: dotElement&#10;            };&#10;            extractedData.push(dataPoint);&#10;            updateDataTable();&#10;            sendExtractedData(realValues);&#10;        }&#10;    }&#10;&#10;    function calculateCalibration() {&#10;        calibratedValues.x = (calibration.x[1].value - calibration.x[0].value) / (calibration.x[1].x - calibration.x[0].x);&#10;        calibratedValues.y = (calibration.y[1].value - calibration.y[0].value) / (calibration.y[1].y - calibration.y[0].y);&#10;    }&#10;&#10;    function calculateRealValues(x, y) {&#10;        const realX = calibration.x[0].value + (x - calibration.x[0].x) * calibratedValues.x;&#10;        const realY = calibration.y[0].value + (y - calibration.y[0].y) * calibratedValues.y;&#10;        return { x: realX, y: realY };&#10;    }&#10;&#10;    function renderRedDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot red-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;        return dot;&#10;    }&#10;&#10;    function renderGreenDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot green-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;    }&#10;&#10;    function exportToCSV() {&#10;        const csvContent = [&quot;Index,X Value,Y Value&quot;];&#10;        extractedData.forEach((data, index) =&gt; {&#10;            csvContent.push(`${index + 1},${data.x.toFixed(2)},${data.y.toFixed(2)}`);&#10;        });&#10;        const blob = new Blob([csvContent.join(&quot;\n&quot;)], { type: &quot;text/csv&quot; });&#10;        const url = URL.createObjectURL(blob);&#10;        const a = document.createElement(&quot;a&quot;);&#10;        a.href = url;&#10;        a.download = &quot;extracted_data.csv&quot;;&#10;        a.click();&#10;        URL.revokeObjectURL(url);&#10;    }&#10;&#10;    function deleteDataPoint(index) {&#10;        if (extractedData[index].dotElement) {&#10;            extractedData[index].dotElement.remove();&#10;        }&#10;        extractedData.splice(index, 1);&#10;        updateDataTable();&#10;    }&#10;&#10;    function highlightPoint(index) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const highlight = document.createElement(&quot;div&quot;);&#10;        const dataPoint = extractedData[index];&#10;        highlight.className = &quot;data-dot highlight-dot&quot;;&#10;        highlight.style.left = `${dataPoint.relativeX * 100}%`;&#10;        highlight.style.top = `${dataPoint.relativeY * 100}%`;&#10;        container.appendChild(highlight);&#10;        setTimeout(() =&gt; highlight.remove(), 1000);&#10;    }&#10;&#10;    function updateDataTable() {&#10;        const tableBody = document.getElementById(&quot;data-table-body&quot;);&#10;        tableBody.innerHTML = &quot;&quot;;&#10;        extractedData.forEach((data, index) =&gt; {&#10;            const row = document.createElement(&quot;tr&quot;);&#10;            row.innerHTML = `&lt;td&gt;${index + 1}&lt;/td&gt;&lt;td&gt;${data.x.toFixed(2)}&lt;/td&gt;&lt;td&gt;${data.y.toFixed(2)}&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#&quot; onclick=&quot;deleteDataPoint(${index})&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;`;&#10;            row.addEventListener(&quot;click&quot;, () =&gt; highlightPoint(index));&#10;            tableBody.appendChild(row);&#10;        });&#10;    }&#10;&#10;    // Zoom and pan functions&#10;    function zoomIn() {&#10;        zoomLevel = Math.min(zoomLevel * 1.5, 5);&#10;        updateImageTransform();&#10;    }&#10;&#10;    function zoomOut() {&#10;        zoomLevel = Math.max(zoomLevel / 1.5, 0.5);&#10;        updateImageTransform();&#10;    }&#10;&#10;    function resetZoom() {&#10;        zoomLevel = 1;&#10;        panX = 0;&#10;        panY = 0;&#10;        updateImageTransform();&#10;    }&#10;&#10;    function updateImageTransform() {&#10;        const scene = document.querySelector(&quot;#zoom-scene&quot;);&#10;        scene.style.transform = `scale(${zoomLevel}) translate(${panX}px, ${panY}px)`;&#10;        document.getElementById('zoom-display').textContent = Math.round(zoomLevel * 100) + '%';&#10;    }&#10;&#10;    // Mouse event handlers for panning&#10;    function handleMouseDown(event) {&#10;        if (event.button === 0 &amp;&amp; event.ctrlKey) { // Left click + Ctrl for panning&#10;            isDragging = true;&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;            event.preventDefault();&#10;        }&#10;    }&#10;&#10;    function handleMouseMove(event) {&#10;        if (isDragging) {&#10;            const deltaX = event.clientX - lastMouseX;&#10;            const deltaY = event.clientY - lastMouseY;&#10;            panX += deltaX / zoomLevel;&#10;            panY += deltaY / zoomLevel;&#10;            updateImageTransform();&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;        }&#10;    }&#10;&#10;    function handleMouseUp(event) {&#10;        isDragging = false;&#10;    }&#10;&#10;    // Wheel event for zooming&#10;    function handleWheel(event) {&#10;        if (event.ctrlKey) {&#10;            event.preventDefault();&#10;            if (event.deltaY &lt; 0) {&#10;                zoomIn();&#10;            } else {&#10;                zoomOut();&#10;            }&#10;        }&#10;    }&#10;&#10;    // Initialize event listeners&#10;    document.addEventListener('DOMContentLoaded', function() {&#10;        const imageContainer = document.querySelector(&quot;#image-container&quot;);&#10;        imageContainer.addEventListener('mousedown', handleMouseDown);&#10;        document.addEventListener('mousemove', handleMouseMove);&#10;        document.addEventListener('mouseup', handleMouseUp);&#10;        imageContainer.addEventListener('wheel', handleWheel);&#10;&#10;        if (existingAnalysis.calibration) {&#10;            // load calibration&#10;            existingAnalysis.calibration.x.forEach(pt =&gt; { calibration.x.push(pt); renderGreenDot(pt.relativeX, pt.relativeY); });&#10;            existingAnalysis.calibration.y.forEach(pt =&gt; { calibration.y.push(pt); renderGreenDot(pt.relativeX, pt.relativeY); });&#10;            if (calibration.x.length === 2 &amp;&amp; calibration.y.length === 2) {&#10;                calculateCalibration(); isCalibrating = false;&#10;            }&#10;        }&#10;        if (existingAnalysis.extractedData) {&#10;            existingAnalysis.extractedData.forEach(pt =&gt; {&#10;                const dot = renderRedDot(pt.relativeX, pt.relativeY);&#10;                const dataPoint = { ...pt, dotElement: dot };&#10;                extractedData.push(dataPoint);&#10;            });&#10;            updateDataTable();&#10;        }&#10;    });&#10;&#10;    function sendCalibrationData() {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ calibration })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Calibration data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending calibration data:&quot;, error));&#10;    }&#10;&#10;    function sendExtractedData(data) {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ extractedData: data })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Extracted data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending extracted data:&quot;, error));&#10;    }&#10;&#10;    // Reset calibration and green dots&#10;    function resetCalibration() {&#10;        calibration = { x: [], y: [] };&#10;        calibratedValues = { x: null, y: null };&#10;        isCalibrating = true;&#10;        // remove all green dots&#10;        document.querySelectorAll('.green-dot').forEach(dot =&gt; dot.remove());&#10;        alert('Calibration has been reset. Please re-calibrate axes.');&#10;    }&#10;&#10;    // Clear all data points and red dots&#10;    function clearDataPoints() {&#10;        extractedData.forEach(dp =&gt; { if (dp.dotElement) dp.dotElement.remove(); });&#10;        extractedData = [];&#10;        updateDataTable();&#10;    }&#10;&#10;    // Save analysis JSON&#10;    function saveResults() {&#10;        fetch('', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token }}' },&#10;            body: JSON.stringify({ saveResults: true, calibration, extractedData })&#10;        })&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; alert(data.message || 'Results saved'));&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;style&gt;&#10;    #image-container {&#10;        position: relative;&#10;        display: inline-block;&#10;        overflow: auto; /* Enable scroll bars */&#10;        border: 2px solid #ddd;&#10;        max-width: 100%;&#10;        max-height: 70vh;&#10;        cursor: crosshair;&#10;    }&#10;&#10;    #zoom-scene {&#10;        position: relative;&#10;        transform-origin: top left;&#10;        transition: transform 0.1s ease-out;&#10;        width: fit-content; /* Ensure the scene scales properly */&#10;        height: fit-content;&#10;    }&#10;&#10;    #plot-image {&#10;        display: block;&#10;        max-width: none;&#10;        max-height: none;&#10;        transform-origin: top left;&#10;        transition: transform 0.1s ease-out;&#10;    }&#10;&#10;    .data-dot {&#10;        position: absolute;&#10;        border-radius: 50%;&#10;        pointer-events: none;&#10;        transform: translate(-50%, -50%);&#10;        z-index: 10;&#10;    }&#10;&#10;    .red-dot {&#10;        width: 8px;&#10;        height: 8px;&#10;        background-color: #B02226;&#10;        border: 1px solid whitesmoke;&#10;    }&#10;&#10;    .green-dot {&#10;        width: 10px;&#10;        height: 10px;&#10;        background-color: #38C1F3;&#10;        border: 1px solid whitesmoke;&#10;    }&#10;&#10;    .highlight-dot {&#10;        width: 15px;&#10;        height: 15px;&#10;        background-color: #F0A12C;&#10;        border: 2px solid whitesmoke;&#10;        animation: pulse 0.5s ease-in-out;&#10;    }&#10;&#10;    @keyframes pulse {&#10;        0% { transform: translate(-50%, -50%) scale(1); }&#10;        50% { transform: translate(-50%, -50%) scale(1.5); }&#10;        100% { transform: translate(-50%, -50%) scale(1); }&#10;    }&#10;&#10;    .zoom-controls {&#10;        margin: 10px 0;&#10;    }&#10;&#10;    .zoom-controls button {&#10;        margin-right: 10px;&#10;    }&#10;&#10;    .instructions {&#10;        background-color: #f8f9fa;&#10;        padding: 15px;&#10;        border-radius: 5px;&#10;        margin-bottom: 20px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;{% extends 'master.html' %}&#10;&#10;{% block content %}&#10;&lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;!-- Top Row: Controls --&gt;&#10;        &lt;div class=&quot;col-12 mb-3&quot;&gt;&#10;            &lt;div class=&quot;btn-group&quot;&gt;&#10;                &lt;button onclick=&quot;resetCalibration()&quot; class=&quot;btn btn-warning&quot;&gt;Reset Calibration&lt;/button&gt;&#10;                &lt;button onclick=&quot;clearDataPoints()&quot; class=&quot;btn btn-warning&quot;&gt;Clear Points&lt;/button&gt;&#10;                &lt;button onclick=&quot;saveResults()&quot; class=&quot;btn btn-success&quot;&gt;Save Results&lt;/button&gt;&#10;                &lt;button onclick=&quot;exportToCSV()&quot; class=&quot;btn btn-primary&quot;&gt;Export to CSV&lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;!-- Left Column: Image --&gt;&#10;        &lt;div class=&quot;col-md-8&quot;&gt;&#10;            &lt;h4&gt;Interactive View&lt;/h4&gt;&#10;            &lt;div id=&quot;image-container&quot; class=&quot;border rounded overflow-auto&quot; style=&quot;height: 70vh;&quot;&gt;&#10;                &lt;div id=&quot;zoom-scene&quot;&gt;&#10;                    &lt;img id=&quot;plot-image&quot; src=&quot;/uploaded_images/{{ uploaded_image.image }}&quot; alt=&quot;Uploaded Image&quot; onclick=&quot;handleImageClick(event)&quot; class=&quot;img-fluid&quot;&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Right Column: Extracted Data --&gt;&#10;        &lt;div class=&quot;col-md-4&quot;&gt;&#10;            &lt;h4&gt;Extracted Data&lt;/h4&gt;&#10;            &lt;table class=&quot;table table-striped table-bordered table-hover&quot;&gt;&#10;                &lt;thead&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th&gt;#&lt;/th&gt;&#10;                        &lt;th&gt;X Value&lt;/th&gt;&#10;                        &lt;th&gt;Y Value&lt;/th&gt;&#10;                        &lt;th&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody id=&quot;data-table-body&quot;&gt;&#10;                &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;row mt-4&quot;&gt;&#10;        &lt;!-- Bottom Row: Instructions --&gt;&#10;        &lt;div class=&quot;col-12&quot;&gt;&#10;            &lt;div class=&quot;instructions&quot;&gt;&#10;                &lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;/p&gt;&#10;                &lt;ul&gt;&#10;                    &lt;li&gt;Click on the image to calibrate axes (2 points for X, 2 points for Y).&lt;/li&gt;&#10;                    &lt;li&gt;After calibration, click on data points to extract their values.&lt;/li&gt;&#10;                    &lt;li&gt;Use Ctrl + Left Click to pan the image.&lt;/li&gt;&#10;                    &lt;li&gt;Use mouse wheel while holding Ctrl to zoom in/out.&lt;/li&gt;&#10;                &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;script&gt;&#10;    const existingAnalysis = {{ existing_analysis|default:'{}'|safe }};&#10;    let calibration = {&#10;        x: [],&#10;        y: []&#10;    };&#10;    let calibratedValues = {&#10;        x: null,&#10;        y: null&#10;    };&#10;    let isCalibrating = true;&#10;    let extractedData = [];&#10;&#10;    // Zoom and pan variables&#10;    let zoomLevel = 1;&#10;    let panX = 0;&#10;    let panY = 0;&#10;    let isDragging = false;&#10;    let lastMouseX = 0;&#10;    let lastMouseY = 0;&#10;&#10;    function handleImageClick(event) {&#10;        if (isDragging) return; // Don't process clicks during drag&#10;&#10;        const rect = event.target.getBoundingClientRect();&#10;        const imageElement = document.querySelector(&quot;#plot-image&quot;);&#10;        const imageRect = imageElement.getBoundingClientRect();&#10;&#10;        // Calculate relative position within the image (0 to 1)&#10;        const relativeX = (event.clientX - imageRect.left) / imageRect.width;&#10;        const relativeY = (event.clientY - imageRect.top) / imageRect.height;&#10;&#10;        // Convert to original image coordinates&#10;        const originalX = relativeX * imageElement.naturalWidth;&#10;        const originalY = relativeY * imageElement.naturalHeight;&#10;&#10;        if (isCalibrating) {&#10;            if (calibration.x.length &lt; 2) {&#10;                calibration.x.push({ x: originalX, y: originalY, relativeX, relativeY });&#10;                renderGreenDot(relativeX, relativeY);&#10;                alert(`X-axis calibration point ${calibration.x.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this X-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.x[calibration.x.length - 1].value = parseFloat(value);&#10;                }&#10;            } else if (calibration.y.length &lt; 2) {&#10;                calibration.y.push({ x: originalX, y: originalY, relativeX, relativeY });&#10;                renderGreenDot(relativeX, relativeY);&#10;                alert(`Y-axis calibration point ${calibration.y.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this Y-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.y[calibration.y.length - 1].value = parseFloat(value);&#10;                }&#10;            }&#10;&#10;            if (calibration.x.length === 2 &amp;&amp; calibration.y.length === 2) {&#10;                isCalibrating = false;&#10;                alert(&quot;Calibration complete! You can now click on data points.&quot;);&#10;                calculateCalibration();&#10;                sendCalibrationData();&#10;            }&#10;        } else {&#10;            const realValues = calculateRealValues(originalX, originalY);&#10;            const dotElement = renderRedDot(relativeX, relativeY);&#10;            const dataPoint = {&#10;                ...realValues,&#10;                originalX,&#10;                originalY,&#10;                relativeX,&#10;                relativeY,&#10;                dotElement: dotElement&#10;            };&#10;            extractedData.push(dataPoint);&#10;            updateDataTable();&#10;            sendExtractedData(realValues);&#10;        }&#10;    }&#10;&#10;    function calculateCalibration() {&#10;        calibratedValues.x = (calibration.x[1].value - calibration.x[0].value) / (calibration.x[1].x - calibration.x[0].x);&#10;        calibratedValues.y = (calibration.y[1].value - calibration.y[0].value) / (calibration.y[1].y - calibration.y[0].y);&#10;    }&#10;&#10;    function calculateRealValues(x, y) {&#10;        const realX = calibration.x[0].value + (x - calibration.x[0].x) * calibratedValues.x;&#10;        const realY = calibration.y[0].value + (y - calibration.y[0].y) * calibratedValues.y;&#10;        return { x: realX, y: realY };&#10;    }&#10;&#10;    function renderRedDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot red-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;        return dot;&#10;    }&#10;&#10;    function renderGreenDot(relativeX, relativeY) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.className = &quot;data-dot green-dot&quot;;&#10;        dot.style.left = `${relativeX * 100}%`;&#10;        dot.style.top = `${relativeY * 100}%`;&#10;        container.appendChild(dot);&#10;    }&#10;&#10;    function exportToCSV() {&#10;        const csvContent = [&quot;Index,X Value,Y Value&quot;];&#10;        extractedData.forEach((data, index) =&gt; {&#10;            csvContent.push(`${index + 1},${data.x.toFixed(2)},${data.y.toFixed(2)}`);&#10;        });&#10;        const blob = new Blob([csvContent.join(&quot;\n&quot;)], { type: &quot;text/csv&quot; });&#10;        const url = URL.createObjectURL(blob);&#10;        const a = document.createElement(&quot;a&quot;);&#10;        a.href = url;&#10;        a.download = &quot;extracted_data.csv&quot;;&#10;        a.click();&#10;        URL.revokeObjectURL(url);&#10;    }&#10;&#10;    function deleteDataPoint(index) {&#10;        if (extractedData[index].dotElement) {&#10;            extractedData[index].dotElement.remove();&#10;        }&#10;        extractedData.splice(index, 1);&#10;        updateDataTable();&#10;    }&#10;&#10;    function highlightPoint(index) {&#10;        const container = document.querySelector(&quot;#zoom-scene&quot;);&#10;        const highlight = document.createElement(&quot;div&quot;);&#10;        const dataPoint = extractedData[index];&#10;        highlight.className = &quot;data-dot highlight-dot&quot;;&#10;        highlight.style.left = `${dataPoint.relativeX * 100}%`;&#10;        highlight.style.top = `${dataPoint.relativeY * 100}%`;&#10;        container.appendChild(highlight);&#10;        setTimeout(() =&gt; highlight.remove(), 1000);&#10;    }&#10;&#10;    function updateDataTable() {&#10;        const tableBody = document.getElementById(&quot;data-table-body&quot;);&#10;        tableBody.innerHTML = &quot;&quot;;&#10;        extractedData.forEach((data, index) =&gt; {&#10;            const row = document.createElement(&quot;tr&quot;);&#10;            row.innerHTML = `&lt;td&gt;${index + 1}&lt;/td&gt;&lt;td&gt;${data.x.toFixed(2)}&lt;/td&gt;&lt;td&gt;${data.y.toFixed(2)}&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#&quot; onclick=&quot;deleteDataPoint(${index})&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;`;&#10;            row.addEventListener(&quot;click&quot;, () =&gt; highlightPoint(index));&#10;            tableBody.appendChild(row);&#10;        });&#10;    }&#10;&#10;    // Zoom and pan functions&#10;    function zoomIn() {&#10;        zoomLevel = Math.min(zoomLevel * 1.5, 5);&#10;        updateImageTransform();&#10;    }&#10;&#10;    function zoomOut() {&#10;        zoomLevel = Math.max(zoomLevel / 1.5, 0.5);&#10;        updateImageTransform();&#10;    }&#10;&#10;    function resetZoom() {&#10;        zoomLevel = 1;&#10;        panX = 0;&#10;        panY = 0;&#10;        updateImageTransform();&#10;    }&#10;&#10;    function updateImageTransform() {&#10;        const scene = document.querySelector(&quot;#zoom-scene&quot;);&#10;        scene.style.transform = `scale(${zoomLevel}) translate(${panX}px, ${panY}px)`;&#10;        document.getElementById('zoom-display').textContent = Math.round(zoomLevel * 100) + '%';&#10;    }&#10;&#10;    // Mouse event handlers for panning&#10;    function handleMouseDown(event) {&#10;        if (event.button === 0 &amp;&amp; event.ctrlKey) { // Left click + Ctrl for panning&#10;            isDragging = true;&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;            event.preventDefault();&#10;        }&#10;    }&#10;&#10;    function handleMouseMove(event) {&#10;        if (isDragging) {&#10;            const deltaX = event.clientX - lastMouseX;&#10;            const deltaY = event.clientY - lastMouseY;&#10;            panX += deltaX / zoomLevel;&#10;            panY += deltaY / zoomLevel;&#10;            updateImageTransform();&#10;            lastMouseX = event.clientX;&#10;            lastMouseY = event.clientY;&#10;        }&#10;    }&#10;&#10;    function handleMouseUp(event) {&#10;        isDragging = false;&#10;    }&#10;&#10;    // Wheel event for zooming&#10;    function handleWheel(event) {&#10;        if (event.ctrlKey) {&#10;            event.preventDefault();&#10;            if (event.deltaY &lt; 0) {&#10;                zoomIn();&#10;            } else {&#10;                zoomOut();&#10;            }&#10;        }&#10;    }&#10;&#10;    // Initialize event listeners&#10;    document.addEventListener('DOMContentLoaded', function() {&#10;        const imageContainer = document.querySelector(&quot;#image-container&quot;);&#10;        imageContainer.addEventListener('mousedown', handleMouseDown);&#10;        document.addEventListener('mousemove', handleMouseMove);&#10;        document.addEventListener('mouseup', handleMouseUp);&#10;        imageContainer.addEventListener('wheel', handleWheel);&#10;&#10;        if (existingAnalysis.calibration) {&#10;            // load calibration&#10;            existingAnalysis.calibration.x.forEach(pt =&gt; { calibration.x.push(pt); renderGreenDot(pt.relativeX, pt.relativeY); });&#10;            existingAnalysis.calibration.y.forEach(pt =&gt; { calibration.y.push(pt); renderGreenDot(pt.relativeX, pt.relativeY); });&#10;            if (calibration.x.length === 2 &amp;&amp; calibration.y.length === 2) {&#10;                calculateCalibration(); isCalibrating = false;&#10;            }&#10;        }&#10;        if (existingAnalysis.extractedData) {&#10;            existingAnalysis.extractedData.forEach(pt =&gt; {&#10;                const dot = renderRedDot(pt.relativeX, pt.relativeY);&#10;                const dataPoint = { ...pt, dotElement: dot };&#10;                extractedData.push(dataPoint);&#10;            });&#10;            updateDataTable();&#10;        }&#10;    });&#10;&#10;    function sendCalibrationData() {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ calibration })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Calibration data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending calibration data:&quot;, error));&#10;    }&#10;&#10;    function sendExtractedData(data) {&#10;        fetch(&quot;&quot;, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                &quot;X-CSRFToken&quot;: &quot;{{ csrf_token }}&quot;&#10;            },&#10;            body: JSON.stringify({ extractedData: data })&#10;        })&#10;        .then(response =&gt; response.json())&#10;        .then(data =&gt; console.log(&quot;Extracted data sent successfully:&quot;, data))&#10;        .catch(error =&gt; console.error(&quot;Error sending extracted data:&quot;, error));&#10;    }&#10;&#10;    // Reset calibration and green dots&#10;    function resetCalibration() {&#10;        calibration = { x: [], y: [] };&#10;        calibratedValues = { x: null, y: null };&#10;        isCalibrating = true;&#10;        // remove all green dots&#10;        document.querySelectorAll('.green-dot').forEach(dot =&gt; dot.remove());&#10;        alert('Calibration has been reset. Please re-calibrate axes.');&#10;    }&#10;&#10;    // Clear all data points and red dots&#10;    function clearDataPoints() {&#10;        extractedData.forEach(dp =&gt; { if (dp.dotElement) dp.dotElement.remove(); });&#10;        extractedData = [];&#10;        updateDataTable();&#10;    }&#10;&#10;    // Save analysis JSON&#10;    function saveResults() {&#10;        fetch('', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token }}' },&#10;            body: JSON.stringify({ saveResults: true, calibration, extractedData })&#10;        })&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; alert(data.message || 'Results saved'));&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;style&gt;&#10;    #image-container {&#10;        position: relative;&#10;        display: inline-block;&#10;        overflow: auto; /* Enable scroll bars */&#10;        border: 2px solid #ddd;&#10;        max-width: 100%;&#10;        max-height: 70vh;&#10;        cursor: crosshair;&#10;    }&#10;&#10;    #zoom-scene {&#10;        position: relative;&#10;        transform-origin: top left;&#10;        transition: transform 0.1s ease-out;&#10;        width: fit-content; /* Ensure the scene scales properly */&#10;        height: fit-content;&#10;    }&#10;&#10;    #plot-image {&#10;        display: block;&#10;        max-width: none;&#10;        max-height: none;&#10;        transform-origin: top left;&#10;        transition: transform 0.1s ease-out;&#10;    }&#10;&#10;    .data-dot {&#10;        position: absolute;&#10;        border-radius: 50%;&#10;        pointer-events: none;&#10;        transform: translate(-50%, -50%);&#10;        z-index: 10;&#10;    }&#10;&#10;    .red-dot {&#10;        width: 8px;&#10;        height: 8px;&#10;        background-color: #B02226;&#10;        border: 1px solid whitesmoke;&#10;    }&#10;&#10;    .green-dot {&#10;        width: 10px;&#10;        height: 10px;&#10;        background-color: #38C1F3;&#10;        border: 1px solid whitesmoke;&#10;    }&#10;&#10;    .highlight-dot {&#10;        width: 15px;&#10;        height: 15px;&#10;        background-color: #F0A12C;&#10;        border: 2px solid whitesmoke;&#10;        animation: pulse 0.5s ease-in-out;&#10;    }&#10;&#10;    @keyframes pulse {&#10;        0% { transform: translate(-50%, -50%) scale(1); }&#10;        50% { transform: translate(-50%, -50%) scale(1.5); }&#10;        100% { transform: translate(-50%, -50%) scale(1); }&#10;    }&#10;&#10;    .zoom-controls {&#10;        margin: 10px 0;&#10;    }&#10;&#10;    .zoom-controls button {&#10;        margin-right: 10px;&#10;    }&#10;&#10;    .instructions {&#10;        background-color: #f8f9fa;&#10;        padding: 15px;&#10;        border-radius: 5px;&#10;        margin-bottom: 20px;&#10;    }&#10;&#10;    .table {&#10;        display: block;&#10;        max-height: 60vh;&#10;        overflow-y: auto;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/interactive_image.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/interactive_image.html" />
              <option name="updatedContent" value="&lt;script&gt;&#10;    let calibration = {&#10;        x: [],&#10;        y: []&#10;    };&#10;    let calibratedValues = {&#10;        x: null,&#10;        y: null&#10;    };&#10;    let isCalibrating = true;&#10;&#10;    function handleImageClick(event) {&#10;        const rect = event.target.getBoundingClientRect();&#10;        const x = event.clientX - rect.left;&#10;        const y = event.clientY - rect.top;&#10;&#10;        if (isCalibrating) {&#10;            if (calibration.x.length &lt; 2) {&#10;                calibration.x.push({ x, y });&#10;                alert(`X-axis calibration point ${calibration.x.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this X-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.x[calibration.x.length - 1].value = parseFloat(value);&#10;                }&#10;            } else if (calibration.y.length &lt; 2) {&#10;                calibration.y.push({ x, y });&#10;                alert(`Y-axis calibration point ${calibration.y.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this Y-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.y[calibration.y.length - 1].value = parseFloat(value);&#10;                }&#10;            }&#10;&#10;            if (calibration.x.length === 2 &amp;&amp; calibration.y.length === 2) {&#10;                isCalibrating = false;&#10;                alert(&quot;Calibration complete! You can now click on data points.&quot;);&#10;                calculateCalibration();&#10;            }&#10;        } else {&#10;            const realValues = calculateRealValues(x, y);&#10;            renderRedDot(x, y);&#10;            alert(`Extracted values: X = ${realValues.x}, Y = ${realValues.y}`);&#10;        }&#10;    }&#10;&#10;    function calculateCalibration() {&#10;        calibratedValues.x = (calibration.x[1].value - calibration.x[0].value) / (calibration.x[1].x - calibration.x[0].x);&#10;        calibratedValues.y = (calibration.y[1].value - calibration.y[0].value) / (calibration.y[1].y - calibration.y[0].y);&#10;    }&#10;&#10;    function calculateRealValues(x, y) {&#10;        const realX = calibration.x[0].value + (x - calibration.x[0].x) * calibratedValues.x;&#10;        const realY = calibration.y[0].value + (y - calibration.y[0].y) * calibratedValues.y;&#10;        return { x: realX, y: realY };&#10;    }&#10;&#10;    function renderRedDot(x, y) {&#10;        const img = document.querySelector(&quot;img&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.style.position = &quot;absolute&quot;;&#10;        dot.style.left = `${x}px`;&#10;        dot.style.top = `${y}px`;&#10;        dot.style.width = &quot;5px&quot;;&#10;        dot.style.height = &quot;5px&quot;;&#10;        dot.style.backgroundColor = &quot;red&quot;;&#10;        dot.style.borderRadius = &quot;50%&quot;;&#10;        dot.style.pointerEvents = &quot;none&quot;;&#10;        img.parentElement.appendChild(dot);&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;style&gt;&#10;    body {&#10;        position: relative;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;!-- Updated image tag --&gt;&#10;&lt;img src=&quot;/uploaded_images/{{ uploaded_image.image }}&quot; alt=&quot;Uploaded Image&quot; onclick=&quot;handleImageClick(event)&quot; style=&quot;max-width: 100%; height: auto; position: relative;&quot;&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>