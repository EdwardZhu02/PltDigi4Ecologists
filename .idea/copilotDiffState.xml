<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/templates/interactive_image.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/interactive_image.html" />
              <option name="updatedContent" value="&lt;script&gt;&#10;    let calibration = {&#10;        x: [],&#10;        y: []&#10;    };&#10;    let calibratedValues = {&#10;        x: null,&#10;        y: null&#10;    };&#10;    let isCalibrating = true;&#10;&#10;    function handleImageClick(event) {&#10;        const rect = event.target.getBoundingClientRect();&#10;        const x = event.clientX - rect.left;&#10;        const y = event.clientY - rect.top;&#10;&#10;        if (isCalibrating) {&#10;            if (calibration.x.length &lt; 2) {&#10;                calibration.x.push({ x, y });&#10;                alert(`X-axis calibration point ${calibration.x.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this X-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.x[calibration.x.length - 1].value = parseFloat(value);&#10;                }&#10;            } else if (calibration.y.length &lt; 2) {&#10;                calibration.y.push({ x, y });&#10;                alert(`Y-axis calibration point ${calibration.y.length} recorded. Please input the value.`);&#10;                const value = prompt(&quot;Enter the value for this Y-axis point:&quot;);&#10;                if (value !== null) {&#10;                    calibration.y[calibration.y.length - 1].value = parseFloat(value);&#10;                }&#10;            }&#10;&#10;            if (calibration.x.length === 2 &amp;&amp; calibration.y.length === 2) {&#10;                isCalibrating = false;&#10;                alert(&quot;Calibration complete! You can now click on data points.&quot;);&#10;                calculateCalibration();&#10;            }&#10;        } else {&#10;            const realValues = calculateRealValues(x, y);&#10;            renderRedDot(x, y);&#10;            alert(`Extracted values: X = ${realValues.x}, Y = ${realValues.y}`);&#10;        }&#10;    }&#10;&#10;    function calculateCalibration() {&#10;        calibratedValues.x = (calibration.x[1].value - calibration.x[0].value) / (calibration.x[1].x - calibration.x[0].x);&#10;        calibratedValues.y = (calibration.y[1].value - calibration.y[0].value) / (calibration.y[1].y - calibration.y[0].y);&#10;    }&#10;&#10;    function calculateRealValues(x, y) {&#10;        const realX = calibration.x[0].value + (x - calibration.x[0].x) * calibratedValues.x;&#10;        const realY = calibration.y[0].value + (y - calibration.y[0].y) * calibratedValues.y;&#10;        return { x: realX, y: realY };&#10;    }&#10;&#10;    function renderRedDot(x, y) {&#10;        const img = document.querySelector(&quot;img&quot;);&#10;        const dot = document.createElement(&quot;div&quot;);&#10;        dot.style.position = &quot;absolute&quot;;&#10;        dot.style.left = `${x}px`;&#10;        dot.style.top = `${y}px`;&#10;        dot.style.width = &quot;5px&quot;;&#10;        dot.style.height = &quot;5px&quot;;&#10;        dot.style.backgroundColor = &quot;red&quot;;&#10;        dot.style.borderRadius = &quot;50%&quot;;&#10;        dot.style.pointerEvents = &quot;none&quot;;&#10;        img.parentElement.appendChild(dot);&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;style&gt;&#10;    body {&#10;        position: relative;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;!-- Updated image tag --&gt;&#10;&lt;img src=&quot;/uploaded_images/{{ uploaded_image.image }}&quot; alt=&quot;Uploaded Image&quot; onclick=&quot;handleImageClick(event)&quot; style=&quot;max-width: 100%; height: auto; position: relative;&quot;&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>